// MIT License
//
// Copyright (c) 2022 Advanced Micro Devices, Inc. All Rights Reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

// clang-format off
#define OMNITRACE_VERSION_STRING "@FULL_VERSION_STRING@"
#define OMNITRACE_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define OMNITRACE_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define OMNITRACE_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define OMNITRACE_GIT_DESCRIBE "@OMNITRACE_GIT_DESCRIBE@"
#define OMNITRACE_GIT_REVISION "@OMNITRACE_GIT_REVISION@"

// system info during compilation
#define OMNITRACE_LIBRARY_ARCH     "@CMAKE_LIBRARY_ARCHITECTURE@"
#define OMNITRACE_SYSTEM_NAME      "@CMAKE_SYSTEM_NAME@"
#define OMNITRACE_SYSTEM_PROCESSOR "@CMAKE_SYSTEM_PROCESSOR@"
#define OMNITRACE_SYSTEM_VERSION   "@CMAKE_SYSTEM_VERSION@"

// compiler information
#define OMNITRACE_COMPILER_ID      "@CMAKE_CXX_COMPILER_ID@"
#define OMNITRACE_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@"
#define OMNITRACE_COMPILER_STRING  OMNITRACE_COMPILER_ID " v" OMNITRACE_COMPILER_VERSION

#define OMNITRACE_DEFAULT_ROCM_PATH "@ROCmVersion_DIR@"
#define OMNITRACE_ROCM_VERSION_STRING "@OMNITRACE_ROCM_VERSION@"
#define OMNITRACE_ROCM_VERSION_MAJOR @OMNITRACE_ROCM_VERSION_MAJOR@
#define OMNITRACE_ROCM_VERSION_MINOR @OMNITRACE_ROCM_VERSION_MINOR@
#define OMNITRACE_ROCM_VERSION_PATCH @OMNITRACE_ROCM_VERSION_PATCH@

// these can be set via defining the variable in CMake, e.g.:
//      cmake -D OMNITRACE_CACHELINE_SIZE=N /path/to/source
// if not defined when configuring cmake, these values fall back to
// default values set in core/containers/aligned_static_vector.hpp.
// the OMNITRACE_CACHELINE_SIZE_MIN is used to ensure portability
#cmakedefine OMNITRACE_CACHELINE_SIZE @OMNITRACE_CACHELINE_SIZE@
#cmakedefine OMNITRACE_CACHELINE_SIZE_MIN @OMNITRACE_CACHELINE_SIZE_MIN@

// misc definitions which can be configured by cmake to override the defaults
#cmakedefine OMNITRACE_ROCM_MAX_COUNTERS @OMNITRACE_ROCM_MAX_COUNTERS@
// clang-format on

#define OMNITRACE_VERSION                                                                \
    ((10000 * OMNITRACE_VERSION_MAJOR) + (100 * OMNITRACE_VERSION_MINOR) +               \
     OMNITRACE_VERSION_PATCH)

#define OMNITRACE_ROCM_VERSION                                                           \
    ((10000 * OMNITRACE_ROCM_VERSION_MAJOR) + (100 * OMNITRACE_ROCM_VERSION_MINOR) +     \
     OMNITRACE_ROCM_VERSION_PATCH)

#if OMNITRACE_ROCM_VERSION_MAJOR > 0
#    define OMNITRACE_ROCM_VERSION_COMPAT_STRING                                         \
        "v@OMNITRACE_ROCM_VERSION_MAJOR@.@OMNITRACE_ROCM_VERSION_MINOR@.x"
#else
#    define OMNITRACE_ROCM_VERSION_COMPAT_STRING ""
#endif

// this should be passed to argparse::argument_parser::enable_version
// Example:
//      parser.enable_version(<name>, OMNITRACE_ARGPARSE_VERSION_INFO);
#if !defined(OMNITRACE_ARGPARSE_VERSION_INFO)
#    define OMNITRACE_ARGPARSE_VERSION_INFO                                              \
        "v" OMNITRACE_VERSION_STRING, OMNITRACE_GIT_DESCRIBE, OMNITRACE_GIT_REVISION,    \
        {                                                                                \
            { "", OMNITRACE_LIBRARY_ARCH }, { "compiler", OMNITRACE_COMPILER_STRING },   \
            {                                                                            \
                "rocm", OMNITRACE_ROCM_VERSION_COMPAT_STRING                             \
            }                                                                            \
        }
#endif

// clang-format off
#if !defined(OMNITRACE_MAX_THREADS)
#    define OMNITRACE_MAX_THREADS @OMNITRACE_MAX_THREADS@
#endif

#if !defined(OMNITRACE_MAX_UNWIND_DEPTH)
#    define OMNITRACE_MAX_UNWIND_DEPTH @OMNITRACE_MAX_UNWIND_DEPTH@
#endif
// clang-format on

// in general, we want to make sure the cache line size is not less than
// 64 bytes (most common cacheline size for x86-64 CPUs) so unless
// OMNITRACE_CACHELINE_SIZE was explicitly set, we set the min to 64
// and use the max value of OMNITRACE_CACHELINE_SIZE and
// OMNITRACE_CACHELINE_SIZE_MIN to assure that false-sharing is well
// guarded against
#if !defined(OMNITRACE_CACHELINE_SIZE_MIN)
#    if defined(OMNITRACE_CACHELINE_SIZE)
#        define OMNITRACE_CACHELINE_SIZE_MIN OMNITRACE_CACHELINE_SIZE
#    else
#        define OMNITRACE_CACHELINE_SIZE_MIN 64
#    endif
#endif

#if !defined(OMNITRACE_ROCM_MAX_COUNTERS)
#    define OMNITRACE_ROCM_MAX_COUNTERS 25
#endif

#define OMNITRACE_ATTRIBUTE(...)    __attribute__((__VA_ARGS__))
#define OMNITRACE_VISIBILITY(MODE)  OMNITRACE_ATTRIBUTE(visibility(MODE))
#define OMNITRACE_PUBLIC_API        OMNITRACE_VISIBILITY("default")
#define OMNITRACE_HIDDEN_API        OMNITRACE_VISIBILITY("hidden")
#define OMNITRACE_INTERNAL_API      OMNITRACE_VISIBILITY("internal")
#define OMNITRACE_INLINE            OMNITRACE_ATTRIBUTE(always_inline) inline
#define OMNITRACE_NOINLINE          OMNITRACE_ATTRIBUTE(noinline)
#define OMNITRACE_HOT               OMNITRACE_ATTRIBUTE(hot)
#define OMNITRACE_COLD              OMNITRACE_ATTRIBUTE(cold)
#define OMNITRACE_CONST             OMNITRACE_ATTRIBUTE(const)
#define OMNITRACE_PURE              OMNITRACE_ATTRIBUTE(pure)
#define OMNITRACE_WEAK              OMNITRACE_ATTRIBUTE(weak)
#define OMNITRACE_PACKED            OMNITRACE_ATTRIBUTE(__packed__)
#define OMNITRACE_PACKED_ALIGN(VAL) OMNITRACE_PACKED OMNITRACE_ATTRIBUTE(__aligned__(VAL))
#define OMNITRACE_LIKELY(...)       __builtin_expect((__VA_ARGS__), 1)
#define OMNITRACE_UNLIKELY(...)     __builtin_expect((__VA_ARGS__), 0)

#if defined(OMNITRACE_CI) && OMNITRACE_CI > 0
#    if defined(NDEBUG)
#        undef NDEBUG
#    endif
#    if !defined(DEBUG)
#        define DEBUG 1
#    endif
#    if defined(__cplusplus)
#        include <cassert>
#    else
#        include <assert.h>
#    endif
#endif

#define OMNITRACE_STRINGIZE(X)           OMNITRACE_STRINGIZE2(X)
#define OMNITRACE_STRINGIZE2(X)          #X
#define OMNITRACE_VAR_NAME_COMBINE(X, Y) X##Y
#define OMNITRACE_VARIABLE(X, Y)         OMNITRACE_VAR_NAME_COMBINE(X, Y)
#define OMNITRACE_LINESTR                OMNITRACE_STRINGIZE(__LINE__)
#define OMNITRACE_ESC(...)               __VA_ARGS__

#if defined(__cplusplus)
#    if !defined(OMNITRACE_FOLD_EXPRESSION)
#        define OMNITRACE_FOLD_EXPRESSION(...) ((__VA_ARGS__), ...)
#    endif
#endif
